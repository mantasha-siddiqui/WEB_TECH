javascript is scripting language used to add functionality to the webpages .
with the help of html and css, the webpage is static.
with the help of html and css and js, the webpage is dynamic.

single page and multi page application.

MERN- mangodb, express js , react js , node js.

HISTORY OF JS
JS is introduced by Brendan eich in year 1995 within 15 days.
the first name of JS was Mocha (they were able to see live changes so they change the name as livescript), they again rename in same year i.e Livescript. then again it was rename as Javascript.as Js doesnt contain standerization (rules) after 2 year they handover this language to ECMA corporation  (european computer manufacturer association)they have given some standard rule or standerization to JS. after giving standard to JS
they introduced first version of JS as ECMA script-1 (ES-1). the first official name of JS is ECMA script in 1997.
ECMA corporation is located in switzerland.

*current version of JS is ES-14 but first stable version of JS is ES-6.
*before ES-6 we have only var but it does not provide security so in ES-14 they introduce let and const.

FEATURES OF JS
1- JS is a scripting language.(it will define when and how our browser will act)          
2- JS is object based language.(in JS everything is object. (string,datatype,array all this is object))
3- JS is dynamically typed language.(when we pass any value it get automatically converted)
4- JS is weakly type language.(with one variable we can store any value (while declaring variable no need to mention datatypes))
5- JS is interpreted language. (interpreted means line by line so if any line contain error it will not execute and it will not go to next line)
6- JS is synchronous in nature.(only one task at a time) *(asynchronous- multi task at a time). we can make JS asynchronous by using concept like async-await, promises,callback. default behaviour of JS is synchronous.

* all scripting language are programming language but only some programming lang are scripting lang.
we can run JS at two envoironment:-
browser and node js (node js is a runtime envoironment)

browser                          JSE(javascript engines)
google chrome                      V8
Mozilla                          spider monkey
microsoft internet explorer      chakra
Safari                           JS core        

runtime polymorphism is not possible in js that's why it is not completely object oriented language.

there are two ways to write JS :-
1- internal (inside the html code)
2- external (we create a seperate file)
*


ADVANTAGES OF JAVASCRIPT
1- easy to learn and implement.
2- reduces server load.
3- Efficient performance
4- regular updates
5- plateform independent
6- it has more frameworks and libraries.

DISADVANTAGES OF JAVASCRIPT
1- Security Issues
2-Browser Compatibility
3-Client-Side Execution
4-Lack of Debugging Facilities
5-Single-Threaded Nature

in JS we have 60+ keywords.

in JS literals is of 2 types :-
1- Primitive datatype
string,boolean,null,undefine,symbol,BigInt.
2- Non-Primitive datatype
object,function,array

*datatype is used to specify which type of data to be stored.
*seperator are used to seperate the statements.
*operator is used to perform specific operation on operands.
*to declare variable in JS we have 3 things:-
let , var , const

let a = 10;
let a //declare
a=10 // initialize

var -   declaration is possible  and initailization is also possible and it can be done in different line  
        re-initialization is possible  
        re-declaration is possible (same variable name) 
        scope is global(access anywhere) 
        hosting is possible  (without initializing also ,default value be undefined)   
let  -  declaration is possible  and initailization is also possible and it can be done in different line 
        re-initialization is possible   
        re-declaration is not possible
        scope is script 
        hosting is not possible (bcz of TDZ)     
const -  only with initialization declaration is possible in same line
        re-initialization is not possible   
        re-declaration is not possible 
        scope is script
        hosting is not possible (bcz of TDZ)  


* hoisting is accessing the variable before declaration.                
ex- console.log(a)
    var a = 10;
OR hoisting is JS default behaviour of moving all declarations to the top of current scope.  

*inside script scope we have something called TDZ (temporary dead zone). whatever variable is in tdz so for that variable default value will not be initialized.
*TDZ is a phase between variable declaration , initialization.

* Datatype is of 2 types 
1- Primitive datatype
string,boolean,null,undefine,symbol,BigInt,number
2- Non-Primitive datatype
object,function,array

* undefined and null is value (if we dont initialize then it is undefined)
* symbol is used to get unique results.

* output methods in JS :-
1- console.log()
2- document.write()
3- document.writeln()

* pop-up Methods:-
1- alert()
2- prompt()
3- confirm()

* console is an object present inside windows object(global object).
console.log is visible on console panel.
* document is also an object present in window object.
document.write is visible on webpage(UI),it will print the output on UI.
* document.writeln it will also print the output on UI. 
the only difference between these are that document.writeln will give space of 1 character  after the statements or words.

* alert is a method which is a windows object (window.alert()) as alert is window object so without window also we can write alert .
 it is pop up method ,here we have only one button (ok) , it is used to show alert msg on webpage.
 to store the data of alert msg  we will take a variable i.e let a = alert();
 alert method will not return any data

* prompt method is used to take some data from user.
  the return type of prompt method is string 
  if we cancel the pop up msg then it will give null and if we give any data it will give that data only.

* confirm method it is used too show some confirmation msg here it has two button (ok and cancel)
  the return type of confirm method is boolean

* typecasting is used to convert from one  type of data to another
it is two types :-
1- implicit-typecasting done by javascript engine
2- explicit-typecasting done by programmer we can achieve explicit by using constructor


* 6 falsy values in JS:-
(empty value)"" , 0 , false , null , undefined , NaN(input is not valid to convert it into datatype then NaN will come (ex= "ab"))

* operator is predefined symbol used to perform particular task
types :-
1- arithmatic operator  +,-,*,/,%,++,--
2- assignment operator  += , -= , *= , /= , %= , =
3-comparison operator   < , > , != , >= , <= , == , ===
4-logical operator      && , || , !
5- ternary operator     (condition)? True statement : false statement
three types :-
1- unary - operator taking one value at a time ex - increement  , decreement
2- binary- operator taking two value at a time.
3-ternary- operator taking three value at a time.

== it checks only values and === it checks value as well as datatype.
nullish operator= if left side is null it will give RHS value 
ex- int a = 5;
    console.log(a || 10);  // if a is null then it will give same o/p as 10 but if a has value then it will give that value only

* conditional operator are used to perform different actions based on different conditions.
types:-
1-if -Executes a block of code if a specified condition is true.
2-else - (if else) = when multiple condition is there 
3-else if ladder = when one condition is there
4-switch
* in switch case i can pass expression we cannot pass condition but inside switch, cases is there so there we can pass conditions and expressions 
* and break is mandatory to be used
* but in else if we can only pass condition.

* control statement - break and continue.
* LOOP :- it can execute a block of code a no of times.
types:-
1-while loop- The while loop loops through a block of code as long as a specified condition is true.
2-do while loop - This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.
3-for loop-loops through a block of code a number of times

* there are two advanced for loop in JS:- 1-for of 2- for in

* A function in JavaScript is block of code which is used to perform a particular task, with function we can reuse code, we can write codes that can be used many times , we can use same code with diff arguments.
syntax:-
function declaration - function FunName(){
                         //statement(function body)
function declaration - }
function calling statement - FunName()


* to execute the code we have to call the function
while calling function we pass argument and we can pass multiple values (10,20,30)
which declaration we pass parametre (a,b,c), same no of variable as argument in parametre no need to use keyword(let,const)
parametre name can be anything (first argument - first parametre)

TYPES OF FUNCTION:
1-anonymous function= function without any name
let a = function(){
}
* to call AF we can store that function in variable and call that function by there variable name , we cannot call function with name
2-named function- function with some name

3-function with expression- storing any function in one variable, it is also called functional expression/first class function
4-nested function- function declared inside another function.
to call nested function there are two ways:-
1-calling child function inside parent function
2-function currying:- only one execution  context will be there at a time

5-immediately invoked function expression(IIFE)- invoking the functiom immediately after its declaration,WE CAN EXECUTE  IT ONLY ONCE.
6-arrow function:- it is short hand to declare a function 
syntax-  ()=>{}  that arrow is called fatt arrow.to call this function assign this function to variable and with the help of variable we can call

7-higher order function
8-callback function
9-generator function

JS engines:-
parser in JS will split the code into small small chunks. it will pass it to jit complier , jit compiler will convert that chunks to byte code.
interpreter will compile it line by line.
processor will process that code and give the final result.

AST = abstract structure tree it will create hierarchy tree structure of our html file.
it will hold our complete structure in tree format(only html file)
each element is known as node.
in call stack code execution is done 
in heap area all the object is stored.


* whenever any function is declared parent function is present inside that in 1st case of nested function (we can access the data of parent function in child function with the help of lexical scoping) but in 2nd case when any function is declared parent function is not there as parent function is in exe phase so every child function is called in that only.(but in this case parent function is not present in call stack 
so how can we get the data? so that data is coming from closure object)

* Lexical Scoping:-accessing the data from outer scope.
* closure object:- it is an object which holds the data which is required to child function 
closure object will get created whenever child function is accessing parent data ,doesnt matter parent function is present inside child function.
* in both cases closure object is created but in 1st case it will access the data with lexical scoping.
 but in second case lexical scoping is not there.
* if in parent we have 3 variable but in child function we are accessing 2 variable of parent function so only that two variable is stored in closure object.

Q-wjf to find factorial of no (use prompt)
Q-wjf to check the given no is palindrome or not
Q-wjf to check the given no is armstrong no or not
Q-wjf to create the fibonacci series upto 5
Q-wjf to check the given no is prime no or not


* THIS keyword in function:-
inside a function this keyword will refer to window object

//binding is a process of refering this keyword to a particular object
how to perform binding - {function_name.call method(object name , extra arguments)}
//to perform binding we have three method
//call(after calling it binds the data) , apply , bind 
// pass parametre in declaration and we have to pass argument in calling function
//to immediatly execute function use call and apply and to execute that function lately we use bind

* there are two types of return statement 
1-implicit 
2-explicit

* implicit - without using return keyword if our function is returning anything
let fun = (a,b) => a+b;
console.log(fun(20,30));
RULES:-
1- we should not use function body
2- no need to use return keyword
3- we should have only one statement in function

to execute multiple statement use ()
let fun = (a,b) => (clg(a,b), a+b);
clg(fun(20,30));

*implicit return is only possible with arrow function (with rest all function it is not possible)

* explicit - return keyword is present

* arrow function different from other function bcz of 
1-short hand
2-implicit is possible
3-in arrow function binding is not possible rest all function it is possible


* generator function
 generator function will create different different generator object (when it gets called)
--we have yield keyword is creating that object which we are getting (only expression we can pass)
--we use function keyword with *
--there is no return keyword 

function* generator(ac) {
        yield ac+10;
        yield ac+20;
        yield ac+30;
        yield ac+40;
}

let ab = generator(10); // store calling function in one variable
console.log(ab);
console.log(ab.next().value);
console.log(ab);
console.log(ab.next().value);
console.log(ab);
console.log(ab.next().value);
console.log(ab); 


*homogenous - same type of data(in array we can store array type of data)

ARRAY:-
* it is a continious block of memory
* in  JS array is heterogenoues in nature (different types of data we can store)

let arr = [10, "mantasha", true, function name (add) {}, {}, [] ];

* in JS we can create array in 2 ways 
1- by array literals:-
 syntax = let arr=[10,"hello",60];

2- by using array constructor(using new keyword)
work of new keyword is to create the object
syntax:-
let arr = new array();
let arr = new array(10,40,30);
console.log(arr); // it will give []
--if we pass any number then it return size of an array {ex = 10 value creating one array of length 10 and 10 empty element}
--if we pass string boolean it will return array element 
--if we pass multiple values it will consider as array element

* if we pass value other than no it will consider it as array element

* hoisting is possible in two ways:-
---variable hoisting
---function hoisting- (only in name function function hoisting is possible)

* function hoisting is not possible in those function where we have declare that function in some variable


* array length is not fixed in JS (we can insert value after it is execution also)

* ARRAY METHODS IN JS

1- push method will add/insert the element at the last
2-unshift method - will insert the element at the starting
3- indexof method will accept an array element it return the index value
4- lastindexof it will return the last index value of last occurence
5- flat()


OBJECT - object is nothing but the thing which has existence in the world , it has state and behaviour(properties and method) (datatypes, primitive non primitive all are object)
everything in javascript is an object

3 ways to create object are:-
1- by object literals
2- by using object contructor (new keyword)
<!-- 3- by using object constructor (without using new keyword) -->


///OBJECT METHODS///
we have methods of object:-(suppose we want to access every details so we have to write each object in console 
so it will make the code lengthy so instead of printing we can use methods)
* object can also have methods 
* methods are action that can be performed on object.
/* OBJECT METHODS 
1. keys: - it will return array of keys
2. values: return array of values
3. entries: array keys and values    
4. assign:- it is used to merge two object
5. seal:- we can only update the properties
6. isSealed:- it is used to check whether the particular object is sealed or not
7. freeze:- we cannot do any modifications is an object
8. isFrozen:- it is used to check  whether the particular object is frozen or not
9. hasOwnProperty:- it is used to check  whether the particular property is present in an object or not.


* STRING is a collection of character it can be single value aur more than two value in  quotes.
three ways to declare string:-
1-single quotes - we cannot create multiline string using this
2-double quotes - we cannot create multiline string using this
3-backtic - with this we can

* some string method in JS:-
string length (it is a property)
string slice()
string substring()
string substr()
string replace()
string replaceall()
string toUpperCase()
string toLowerCase()
string concat()
string trim()
string trimStart()
string trimEnd()
string padStart()
string padEnd()
string charAt()
string charCodeAt()
string split()
string fromcharcodeAt()

* ADVANCED FOR LOOP
1- FOR OF - 
for(const x of arr)  //declare one variable and pass an array 
it will return element , it is valid will for string also
2- FOR IN - it will return index

                     FOR OF           FOR IN 
array               working           working
string              working           working
object             not working        working


* DOM -  Document object model
it is web api , by using this dom we can modify the html element without refreshing the page (also css)
ex- suppose there is rectangle and there is a button we have created so if we click on that button that rectangle changed in circle
document(it is an object it will hold our code in tree format,  document object is a root node for dom tree)
document is an object created by browser (in browser window object is created ,in nodejs we dont have window object)
DOM is not a part of JS. (it is a seperate interface)
DOM allow to modify the document content rendered by the browser without r      eloading the page , therefore , dom help to make a web page dynamic

to target any html element in dom:-
1-document.getElementbyid() - accessing the element by id 
2-document.getelementsbyclassname() - accessing the element by classname
3-document.getelementsbytagname() - accessing the element by tag name
4-document.queryselector()- by using this we can target any html element who has id , class and tag (if  it has only id still we can access and vice versa)
5-document.queryselectorall()

* DOM traversing :- by this we can perform crud opertion on element

METHODS:-
1-  create element-creates the HTML element  
2 - append element
3 - appendchild()
4 - remove()- it removes an element (or node) from the document.
5 - setattribute() - it sets a new value to an attribute. If the attribute does not exist, it is created first.

PROPERTIES:-
1-innerHTML-The innerHTML property sets or returns the HTML content (inner HTML) of an element.
2-innerText

* EVENTS IN DOM
event is an action performed by user on webpage.
a JS can be executed when an event occurs , like when a user click on an html element.

click , mouseover , mouseout , mousedown , mouseup , contaxmenu(for right click) , doubleclick , keypress , keyup , keydown , submit , dblclick(for double click)

there are two ways to use events:
1- by using html attribute
2- by using addEventListener() it will accept two parametre (event name (ex-click) , call back function)

* EVENT propagation 
EVENT PROPAGATION:- how our events are traveling through dom tree
we have 2 phase
1. capturing phase:- events travelling through outer to inner phase
2. bubbling phase:-  events travelling through inner to outer phase

 default phase of event propagation is bubbling phase
 to stop event propagation we have methods to stop propagation we have to pass same parameter in the all the box code like this 
 section.addEventListener("click", (e)=>{
   e.stopPropagation()
  section.style.backgroundColor = "red";
});

api.github.com/users
* JSON (Javascript Object Notation) 
in json format key and values both are in double quotes(string format)
whenever we want to transfer the data to backend we convert that code in json bcz backend understand only json
JSON is lightweight. and it is a format of storing and transporting data, it is used when the data is send from server to webpage
 (server(accept or tranfer) know only json format)JS doesnt know json so JS convert JS data into json  
for conversion we have JSON object called javascript object 
we have two method :-
1- stringify() = used to convert JS into JSON
2- parse() = used to convert json into JS 

* DESTRUCTURING :-
it is a method to extract the data from arrays and objects.
two types of destructuring:-
1- array destructuring - 
2- object destructuring 
to perform this destructuring we have
1- spread operator:- syntax =  {... variable name} - it is used to unpack the element (RHS)
2- rest parameter :- syntax =  {... variable name} - it is used for packing the remaining element (LHS)

* advantage of array destructuring
while destructuring of array we can take any variable name 
* disadvantage of array destructuring
we cant skip array element 

* BROWSER STORAGE
local storage - (permanent storage after closing also it will get storage (for authentication and authorization))
session storage - (it will hold the data until the session is running)
to store or manipulate the data we have object called local storage :-
* local and session storage has some method inside it
to store the data (setitem (two parameter(keyname , what u want to store)))
to fetch the data (getitem (one parametre(keyname)))
to clear all the data localstorage.clear
to remove the data we have localstorage.remove() 

* Math object :- it is used to perform mathematical operations
math.sqrt(pass the no)       
1-math.sqrt
2-math.floor
3-math.ceil
4-math.max - it return maximum of input
5-math.min  
  

* date object = for this just create instance of that object           
* ASYNCHRONOUS JS
JS is synchronous in nature 
so to make our JS asynchrounous(at a time multiple task can be executed) we have method
1- CALLBACKS - it is used to make JS asynchronous
* settimeout() (whenever you want some delay (ex - when we click on login in any forms it take some tym)) , it will execute only once
* setinterval() (ex- for otp we have timer)
* removeitem()
* clear()
2-Promises - it is a mechanism to handle asynchrounous operations 
(promise constructor will accept one cbf and that cbf will accept two parametre(resolve and reject)) 
whenever we are fetcing data from backend , to fetch data it will take time but we cant stop remaining execution , so to handle the situation we have promises 
in promises we have three states:-
1- pending state
2- resolve state
3- reject state
* whenever we are fetcing data from backend , we get promise so 
1- if data is available - resolve
2- data is not there - reject
3-  have data but it is v big and it will take some time - pending

* there are 4 promise methods:-(use settimeout() and promise)
1-any (if any  promises should be resolved then use any)
2-all (all promises should be resolved then use all)
3-allsettled - (to check whether promises are settled or not (all action are performed or not like resolved or rejected))
4-race -  (suppose we have multiple promise the which promise will execute first then we use race)

3- Async and Await

* how to fetch the data in JS
1-fetch - to fetch data from backend we have two method in fetch
 *by using promises
 *async and await 


* MODULES 
it is used to share the code in multiple files
for sharing the file use export
and where u r sharing that file use import

by using module we can share the code in multiple files , and in html we have to specify the type of file like type = module 
in whichever file we are exporting the file that file is module file


there are two types of export statement
1- named export 
- in named export while exporting any statement we use only export keyword
- while importing we have to use curly braces
- while importing we have to use same name 
- in one file we can use multiple named export statement
2- default export
- in default we have to use export and default keyword
- we cannnot use multiple default export statement in single file  
- no need of curly braces
- we can use any name    

